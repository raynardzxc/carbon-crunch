<<<<<<< Updated upstream
ctrl <- trainControl(method = "cv", number = 5, verboseIter = FALSE)
num_class = length(levels(choices))
params = list(
eta=0.1, ## lower implies larger nrounds, means more robust to overfitting but slower to compute
max_depth=5,
gamma=0, ## pruning var, larger more conservative
subsample=0.8,
colsample_bytree=1,
min_child_weight=3,
objective="multi:softprob",
eval_metric="mlogloss",
num_class=num_class
)
xgb.newfit=xgb.train(
params=params,
data=xgb.train,
nrounds=150,
watchlist=list(val1=xgb.train,val2=xgb.test),
verbose=0
)
xgb.pred = predict(xgb.newfit,xgb.test,reshape=T)
xgb.pred = as.data.frame(xgb.pred)
colnames(xgb.pred) = levels(choices)
## add back 1 for the testing data's Choice
test.label <- test.label+1
test.label <- as.data.frame(test.label)
colnames(test.label) <- c("Choice")
logloss <- function(test_set, testpredict_df) {
# Create one-hot encoding for each choice on-the-fly
Ch1 <- as.integer(test_set$Choice == 1)
Ch2 <- as.integer(test_set$Choice == 2)
Ch3 <- as.integer(test_set$Choice == 3)
Ch4 <- as.integer(test_set$Choice == 4)
# Calculate logloss using these one-hot encoded variables
result <- -1/nrow(test_set) * sum(Ch1 * log(testpredict_df$Ch1+.Machine$double.eps) +
Ch2 * log(testpredict_df$Ch2+.Machine$double.eps) +
Ch3 * log(testpredict_df$Ch3+.Machine$double.eps) +
Ch4 * log(testpredict_df$Ch4+.Machine$double.eps))
return(result)
}
colnames(xgb.pred) <- c("Ch1", "Ch2", "Ch3", "Ch4")
logloss(test.label, xgb.pred)
shiny::runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
# initialize state values
day <- reactiveVal(1)
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
test_df <- data.frame(level = 1:3,
cash_generated = c(10, 15, 30),
emissions = c(10, 15, 20),
solar_consumption = c(2, 5, 10),
cost = c(0, 15, 30),
linetype = c(0,1,0,1,0,1))
View(test_df)
test_df <- data.frame(level = c(1,1,2,2,3,3),
cash_generated = c(10, 14, 15, 25, 30, 40),
emissions = c(10, 13, 15, 18, 20, 23),
solar_consumption = c(2, 4, 5, 7, 10, 12),
cost = c(0, 0, 15, 20, 30, 40),
linetype = c(0,1,0,1,0,1))
View(test_df)
test_df$cash_generated[1]
View(test_df)
?where
test_df$cash_generated[test_df$level==1 & test_df$linetype==0]
test_df$cash_generated[test_df$level==1 & test_df$linetype==1]
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
>>>>>>> Stashed changes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/HW 4/Student014VARIANT.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/HW 4/Student014VARIANT.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/HW 4/Student014VARIANT.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
publishModal <- function(ns, failed = FALSE) {
modalDialog(
title = "Leaderboard",
div(
uiOutput(ns("leaderBoard")),
uiOutput(ns("publishControls")),
uiOutput(ns("logregControls")),
)
)
}
runApp()
runApp()
runApp()
?div
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?fluidpage
?fluidPage
runApp()
runApp()
runApp()
?table
runApp()
div(
div(
style = "display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh;", # Center the content vertically
h1("Tutorial"),
h3("Objective"),
p("To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
HTML(
paste0(
'<table style="width:100%; border: none;">',
"<tr>",
"<th> Help </th>",
"<th> Me</th>",
"</tr>",
"<tr>",
"<td> Kill</td>",
"<td> myself</td>",
"</tr>"),
"</table>"
),
h3("How to Play", style = "text-align: left; margin-top: 10px;"),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "battery_4.png", height = "50px", width = "300px", style = "margin-right: 20px;"),
p("Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity")
),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "production_line_tut.jpg", height = "300px", width = "300px", style = "margin-right: 20px;"),
p("5 production lines of two different types producing items of different value. Lines may be upgraded to increase efficiency")
),
div(
style = "display: flex; align-items: center; margin-bottom: 20px;",
img(src = "toggle_fuel_tut.png", height = "45px", width = "45px", style = "margin-right: 20px;"),
img(src = "toggle_sun_tut.png", height = "50px", width = "50px", style = "margin-right: 20px;"),
p("Toggle switch at each production line to switch between using solar power or fossil fuels.If insufficient solar power is used to power a production line, the line will shut down.")
),
div(
style = "display: flex; align-items: center; margin-bottom: 20px;",
img(src = "display_panel_tut.jpg", height = "400px", width = "300px", style = "margin-right: 20px;"),
p(
"Display panel with day indicator, Wallet, Carbon emission Bar, Dashboard, and Next day Button.", tags$br(),
tags$ul(
tags$li("Day indicator - displays current day/total number of days"),
tags$li("Wallet - displays total money player has and may use for upgrade"),
tags$li("Carbon Emission Bar - displays cumulative carbon emissions. Ensure carbon emissions remain within threshold!"),
tags$li("Dashboard - displays profit and emissions generated previous day, along with Energy used (solar), Solar Gained, and Solar Overflow from the previous day"),
tags$li("Next day Button - click to proceed to the next day once necessary upgrades and energy use decisions are made")
)
)
),
div(
style = "text-align: center; margin-top: 50px;",
h1("What are you waiting for? Start Playing!")
),
div(
style = "text-align: center;",
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?h1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
div(class = "tut_div",
titlePanel("Tutorial"),
fluidRow(
column(12, "Objective", "To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
column(12, tags$img(src = "battery_4.png", height = "auto", width = "50%"))
),
# HTML(
#   paste0(
#     '<table>',
#     "<tr>",
#     "<th>kill</th>",
#     "<th>me</th>",
#     "</tr>",
#
#     "<tr>",
#     "<td>Objective</td>",
#     "<td>To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels.</td>",
#     "</tr>",
#
#     "<tr>",
#     "<td>How to Play</td>",
#     "<td></td>",
#     "</tr>",
#
#     "<tr>",
#     "<td>",'<img src = "battery_4.png" height = "auto" width = "50%">', "</td>",
#     "<td>Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity</td>",
#     "</tr>",
#
#     "<tr>",
#     "<td>",'<img src = "production_line_tut.jpg" height = "auto" width = "50%">',"</td>",
#     "<td>5 production lines of two different types producing items of different value. Lines may be upgraded to increase efficiency.</td>",
#     "</tr>",
#
#     "<tr>",
#     "<td>",'<img src = "toggle_fuel_tut.png">', '<img src = "toggle_sun_tut.png">',"</td>",
#     "<td>Toggle switch at each production line to switch between using solar power or fossil fuels.If insufficient solar power is used to power a production line, the line will shut down.</td>",
#     "</tr>",
#
#     "<tr>",
#     "<td>",'<img src = "display_panel_tut.jpg" height = "auto" width = "50%">', "</td>",
#     "<td>Display panel with day indicator, Wallet, Carbon emission Bar, Dashboard, and Next day Button.", "<br>",
#     "<ul>",
#       "<li>Day indicator - displays current day/total number of days</li>",
#       "<li>Wallet - displays total money player has and may use for upgrade</li>",
#       "<li>Carbon Emission Bar - displays cumulative carbon emissions. Ensure carbon emissions remain within threshold!</li>",
#       "<li>Dashboard - displays profit and emissions generated previous day, along with Energy used (solar), Solar Gained, and Solar Overflow from the previous day</li>",
#       "<li>Next day Button - click to proceed to the next day once necessary upgrades and energy use decisions are made</li></ul>",
#     "</td>",
#     "</tr>",
#
#     "</table>")
#   ),
div(
style = "text-align: center;",
PrimaryButton.shinyInput(
ns("back"),
text = "Back to Home"
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
div(
titlePanel("Credits"),
h3("Assets"),
fluidRow(
column(6,
p("Engineers:", style = "font-weight: bold;"),
a("https://murphysdad.itch.io/sci-fi-facility", "https://murphysdad.itch.io/sci-fi-facility")
)
),
# div(
#   style = "display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh;",
#   titlePanel("Credits"),
#   h3("Assets"),
#   tags$ul(
#     tags$li(p("Engineers:", style = "font-weight: bold;"), a("https://murphysdad.itch.io/sci-fi-facility", "https://murphysdad.itch.io/sci-fi-facility")),
#     style = "font-family: 'Arial', sans-serif; font-size: 16px; color: #333; list-style-type: disc; margin-left: 20px;"),
#   p("floor:", style = "font-weight: bold;"),
#   tags$ul(
#     tags$li(a("https://oshq.itch.io/tilemap-sf?download", "https://oshq.itch.io/tilemap-sf?download")),
#     style = "font-family: 'Arial', sans-serif; font-size: 16px; color: #333; list-style-type: disc; margin-left: 20px;"),
#   p("UI:", style = "font-weight: bold;"),
#   tags$ul(
#     tags$li(a("https://cupnooble.itch.io/sprout-lands-ui-pack?download", "https://cupnooble.itch.io/sprout-lands-ui-pack?download")),
#     style = "font-family: 'Arial', sans-serif; font-size: 16px; color: #333; list-style-type: disc; margin-left: 20px;"),
#   p("font:", style = "font-weight: bold;"),
#         tags$ul(
#           tags$li(a("https://www.urbanfonts.com/fonts/Gameplay.font", "https://www.urbanfonts.com/fonts/Gameplay.font")),
#           style = "font-family: 'Arial', sans-serif; font-size: 16px; color: #333; list-style-type: disc; margin-left: 20px;"),
#   div( # Center the content in this div
#     style = "text-align: center;",
#     p("products:", style = "font-weight: bold;"),
#     tags$ul(
#       tags$li(a("https://penzilla.itch.io/top-down-retro-house/download/eyJpZCI6MTc4NjI3OSwiZXhwaXJlcyI6MTY4NjAzMTYxOH0%3d.vYJFv3q%2faML4kiQ4rRHiJ4wizrA%3d", "https://penzilla.itch.io/top-down-retro-house/download/eyJpZCI6MTc4NjI3OSwiZXhwaXJlcyI6MTY4NjAzMTYxOH0%3d.vYJFv3q%2faML4kiQ4rRHiJ4wizrA%3d")),
#       style = "font-family: 'Arial', sans-serif; font-size: 16px; color: #333; list-style-type: disc; margin-left: 20px;"
#     )
#   ),
#   div(
#     style = "text-align: center; margin-top: 20px;",
#     h1("Special thanks to Prof. Jackson and Prof. Lingjie for their guidance.", style = "font-size: 24px;")
#   )
# ),
div( # Center the back button
style = "text-align: center;",
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bscollapse
?bsCollapse
source("usePackages.R")
source("setAWSPassword.R")
pkgnames <- c("tidyverse", "shiny", "shiny.fluent", "shiny.router", "shinyBS","DBI", "shinyWidgets", "ggplot2", "dplyr")
loadPkgs(pkgnames)
# import modules
source("modules/tutorial/tutorialModule.R")
source("modules/game/gameModule.R")
source("modules/leaderboard/leaderboardModule.R")
source("modules/leaderboard/publishModule.R")
source("modules/credits/creditModule.R")
source("modules/analysis/analysisModule.R")
source("helper.R")
?bsCollapse
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
<<<<<<< Updated upstream
=======
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fluidPage(
div(
class = "tut-div",
h2(class = "tutorial-title", "Tutorial"),
div(
class = "image-contain",
img(class = "tut-image", src = "tut_image.png")
),
div(
style = "text-align: center;",
actionButton(ns("back"), "Back", class = "final-button")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cumsum
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?bsCollapse
runApp()
runApp()
runApp()
# bsCollapsePanel(
#   "Production Line Analysis",
#   selectInput(ns("view_select"), "View:",
#     choices = c("Cash Generated", "Emissions Generated", "Solar Consumption"),
#     selected = "Cash Generated"
#   ),
#   plotOutput(ns("combinedPlot"), height = "400px")
# ),
runApp()
runApp()
open = "Game Summary",
runApp()
runApp()
runApp()
?bsCollapse
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> Stashed changes
