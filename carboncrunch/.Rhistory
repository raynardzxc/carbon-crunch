model
model$SSE
ts_actuals <- ts(actuals, frequency = 20)
model <- HoltWinters(ts_actuals, seasonal = "additive")
model$SSE
ts_actuals <- ts(actuals, frequency = 15)
model <- HoltWinters(ts_actuals, seasonal = "additive")
model$SSE
ts_actuals <- ts(actuals, frequency = 12)
model <- HoltWinters(ts_actuals, seasonal = "additive")
model$SSE
library(shiny); runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
UGIE <- endoscopydata %>% filter(Procedure == "Upper GI endoscopy")
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
runApp('C:/Users/ngwei/Desktop/School/ESA/Sandbox/WK 8/TestRShiny21.R')
endoscopydata <- read.csv("EndoscopyDataPublic.csv")
source("usePackages.R")
loadPkgs(c("dplyr","stringr","lubridate","ggplot2"))
UGIE <- endoscopydata %>% filter(Procedure == "Upper GI endoscopy")
head(UGIE)
endoscopydata <- read.csv("EndoscopyDataPublic.csv")
source("usePackages.R")
loadPkgs(c("dplyr","stringr","lubridate","ggplot2"))
UGIE <- endoscopydata %>% filter(Procedure == "Upper GI endoscopy")
head(UGIE)
UGIE <- endoscopydata %>% filter(str_detect(Procedure,"Upper GI endoscopy"))
head(UGIE)
UGIE %>% summarize(numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = count(X), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = max(X), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = length(X), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = length(pseudopatientname), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = length(x), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIE %>% summarize(numrecords = length(X), numpatients = n_distinct(pseudopatientname), numproviders = n_distinct(pseudoprovidername))
UGIEDateTime <- UGIE %>% mutate(ProcedureDate=mdy(Procedure.Date)) %>%
mutate(ProcedureDate=hms(Procedure.Time)) %>%
select(X,ProcedureDate,ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIEDateTime <- UGIE %>% mutate(ProcedureDate=mdy(Procedure.Date)) %>%
mutate(ProcedureTime=hms(Procedure.Time)) %>%
select(X,ProcedureDate,ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
head(UGIEDateTime)
UGIE1 <- mutate(ProcedureDate=mdy(Procedure.Date))
UGIE1 <- mutate(ProcedureDate=mdy(Procedure.Date), data(UGIE))
?mutate
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(ProcedureTime=hms(Procedure.Time))
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(X,ProcedureDate,ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
?select
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,ProcedureDate,ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1,UGIE2,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,-Procedure.Date,-Procedure.Time)
head(UGIEDateTime)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1,UGIE2,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,mutate(UGIE,ProcedureDate=mdy(Procedure.Date)),UGIE2,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1,UGIE2,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1$ProcedureDate,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,select(UGIE1, ProcedureDate),UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
?pick
UGIEDateTime <- select(UGIE,X,pick(UGIE1$ProcedureDate),pick(UGIE2$ProcedureTime),everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,pick(UGIE1$ProcedureDate),pick(UGIE2$ProcedureTime),everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,pick(ProcedureDate=mdy(Procedure.Date)))
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1$ProcedureDate,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1$ProcedureDate,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,format(UGIE1$ProcedureDate, "%b-%y"),UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,UGIE1$ProcedureDate,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,ProcedureDate = UGIE1$ProcedureDate,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE,X,ProcedureDate = UGIE1,UGIE2$ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
UGIE1 <- mutate(UGIE,ProcedureDate=mdy(Procedure.Date))
UGIE2 <- mutate(UGIE1,ProcedureTime=hms(Procedure.Time))
UGIEDateTime <- select(UGIE2,X,ProcedureDate,ProcedureTime,everything(),-Procedure.Date,-Procedure.Time)
head(UGIEDateTime)
UGIEProcedureTimes <- UGIEDateTime %>%
mutate(ProcedureStart = Patient.in.Procedure.Room..) %>%
mutate(ProcedureEnd = Patient.Out.of.Procedure.Room..) %>%
select(X, ProcedureDate,ProcedureTime,pseudopatientname,pseudoprovidername,ProcedureStart,ProcedureEnd)
head(UGIEProcedureTimes)
UGIEDuration <- UGIEProcedureTimes %>%
mutate(ProcedureDuration = ProcedureEnd-ProcedureStart)
UGIEDuration <- UGIEProcedureTimes %>%
mutate(ProcedureDuration = hms(ProcedureEnd)-hms(ProcedureStart))
UGIEDuration <- UGIEProcedureTimes %>%
mutate(ProcedureDuration = hms(ProcedureEnd)-hms(ProcedureStart))
head(UGIEDuration)
UGIEDuration <- UGIEProcedureTimes %>%
mutate(ProcedureDuration = hour(hms(ProcedureEnd)-hms(ProcedureStart))*60+min(hms(ProcedureEnd)-hms(ProcedureStart)))
head(UGIEDuration)
UGIEDuration <- UGIEProcedureTimes %>%
mutate(ProcedureDuration = hour(hms(ProcedureEnd)-hms(ProcedureStart))*60+minute(hms(ProcedureEnd)-hms(ProcedureStart)))
head(UGIEDuration)
?summarise
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop')
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop') %>%
arrange(asc(meanduration))
?arrange
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop') %>%
arrange(meanduration)
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop') %>%
arrange(desc(meanduration))
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop') %>%
filter(countduration != 1)
arrange(desc(meanduration))
UGIEDuration %>%
group_by(pseudoprovidername) %>%
summarise(minduration = min(ProcedureDuration),
maxduration = max(ProcedureDuration),
meanduration = mean(ProcedureDuration),
std_deviation = sd(ProcedureDuration),
countduration = length(ProcedureDuration),
na.rm = TRUE,
.groups = 'drop') %>%
filter(countduration != 1) %>%
arrange(desc(meanduration))
?ggplot
?geom_histogram
ggplot(data = UGIEDuration, aes(x = ProcedureTime))+geom_histogram(data = UGIEDuration, binwidth = 5)
ggplot(data = UGIEDuration, aes(x = ProcedureTime))+geom_histogram(binwidth = 5)
ggplot(data = UGIEDuration, aes(x = ProcedureTime))+geom_histogram(binwidth = 5)
ggplot(data = UGIEDuration, aes(x = ProcedureDuration))+geom_histogram(binwidth = 5)
#R code here
marathon <- read.csv("marathon.csv")
str(marathon)
marathon$Time <- marathon$Hours*3600 + marathon$Minutes*60 + marathon$Seconds
str(marathon)
#R code here
marathon <- read.csv("marathon.csv")
marathon$Time <- marathon$Hours*3600 + marathon$Minutes*60 + marathon$Seconds
which.min(marathon$Time[marathon$Gender=="M"])
str(marathon)
marathon$Name[9]
head(marathon)
marathon$Name[9]
marathon$Name[marathon$Time==min(marathon$Time)]
nam <- marathon$Name[marathon$Time==min(marathon$Time)]
nam
#R code here
marathon$Name[marathon$Gender="F"]
#R code here
marathon$Name[marathon$Gender=="F"]
marathon$Name[marathon$Gender=="M"][9]
which.min(marathon$Time[marathon$Gender=="M"])
str(marathon)
marathon$Name[marathon$Gender=="M"][9]
#R code here
which.min(marathon$Name[marathon$Gender=="F"])
#R code here
which.min(marathon$Time[marathon$Gender=="F"])
marathon$Name[marathon$Gender=="F"][5]
min(marathon$Time[marathon$Gender=="F"])
#R code here
table(marathon$Name[marathon$Gender=="M"], marathon$Age)
#R code here
table(marathon$Name[marathon$Gender=="M"], marathon$Age[marathon$Gender=="M"])
#R code here
t.test(marathon$Time[marathon$Gender=="M"], marathon$Time[marathon$Gender=="F"])
?plot
#R code here
plot(marathon$Age[marathon$Gender=="M"], marathon$Time[marathon$Gender=="M"])
#R code here
model1 <- lm(Time~Age, data = subset(marathon, Gender=="M"&Age<=35))
summary(model1)
#R code here
temp1 <- subset(marathon, Gender=="M"&Age<=35)
temp1
mean(temp1$Time)
#R code here
model2 <- lm(Time~Age+0, data = subset(marathon, Gender=="M"&Age>=36))
summary(model2)
?logical
tapply(marathon$Name[marathon$Gender=="M"],marathon$Age[marathon$Gender=="M"],sum)
tapply(marathon$Name[marathon$Gender=="M"],marathon$Age[marathon$Gender=="M"],count)
tapply(marathon$Name[marathon$Gender=="M"],marathon$Age[marathon$Gender=="M"],nrow)
tapply(marathon$Name[marathon$Gender=="M"],marathon$Age[marathon$Gender=="M"],sum)
#R code here
table(marathon$Name[marathon$Gender=="M"], marathon$Age[marathon$Gender=="M"])
#R code here
marathon$Above75 <- marathon$Age>75
marathon
model3 <- lm(Time~Age:Above75+0, data = subset(marathon, Gender=="M"&Age>=36))
summary(model3)
?lm
?lm.fit
#R code here
plot(marathon$Age[marathon$Gender=="M"], 159.772*marathon$Age[marathon$Above75==FALSE]+192.921*marathon$Age[marathon$Above75==FALSE])
#R code here
plot(marathon$Age[marathon$Gender=="M"], 159.772*marathon$Age[marathon$Above75==FALSE]+192.921*marathon$Age[marathon$Above75==TRUE])
?lm
#R code here
est_at_75 <- 159.772
est_at_76 <- 192.921
diff <- est_at_76 - est_at_75
diff
#R code here
model3$coefficients
#R code here
marathon$Age[marathon$Gender=="M"]
#R code here
marathon$Age[marathon$Gender=="M"&marathon$Age>30]
plot(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75], 159.772*marathon$Age[marathon$Above75==FALSE])
plot(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75], 159.772*marathon$Time[marathon$Above75==FALSE])
nrow(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
nrow(marathon$Age[marathon$Gender=="M"&marathon$Age>=36])
#R code here
marathon$Age[marathon$Gender=="M"&marathon$Age>30]
#R code here
length(marathon$Age[marathon$Gender=="M"&marathon$Age>30])
length(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
length(159.772*marathon$Time[marathon$Above75==FALSE])
length(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
length(159.772*marathon$Time[marathon$Above75==FALSE])
length(159.772*marathon$Time[marathon$Above75==FALSE])
length(159.772*marathon$Time[marathon$Gender=="M"&marathon$Above75==FALSE])
length(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
length(159.772*marathon$Time[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
plot(marathon$Age[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75], 159.772*marathon$Time[marathon$Gender=="M"&marathon$Age>=36&marathon$Age<=75])
plot(marathon$Age[marathon$Gender=="M"&marathon$Age>75], 192.921*marathon$Time[marathon$Gender=="M"&marathon$Age>75])
#R code here
est_at_75 <- 159.772*75
est_at_76 <- 192.921*76
diff <- est_at_76 - est_at_75
diff
#R code here
runtime_at_50 <- 159.772*50
runtime_at_50
#R code here
pro_runtime_at_45 <- 159.772*45
pro_runtime_at_45
runtime_at_50 <- 159.772*50 + discrep
discrep <- 10000-7189.74
runtime_at_50 <- 159.772*50 + discrep
runtime_at_50
#R code here
marathon$Age2 <- marathon$Age^2
marathon
model4 <- lm(Time~Age:Above75+Age2:Above75+0, data = subset(marathon, Gender=="M"&Age>=36))
summary(model4)
#R code here
runtime <- 95*-486.2607 + (95^2)*8.1389
runtime
#R code here
rm(list=ls())
weather <- read.csv("weather.csv")
weather
str(weather)
table(weather$RainTomorrow)
66/(300+66)
table(weather$RainTomorrow)
#R code here
training <- weather[300,]
training
#R code here
training <- weather[300:]
#R code here
training <- weather[,300]
#R code here
training <- weather[1:300,]
training
test <- weather[301:,]
test <- weather[301:length(weather),]
length(weather)
nrow(weather)
nrow(training)
nrow(test)
test <- weather[301:length(weather),]
nrow(test)
test <- weather[301:366,]
nrow(test)
t.test(mean(training$RainTomorrow), mean(test$RainTomorrow))
?t.test
t.test(mean(training$RainTomorrow))
t.test(training$RainTomorrow, test$RainTomorrow)
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"])
#R code here
marathon <- read.csv("marathon.csv")
marathon$Time <- marathon$Hours*3600 + marathon$Minutes*60 + marathon$Seconds
which.min(marathon$Time[marathon$Gender=="M"])
str(marathon)
marathon$Name[marathon$Gender=="M"][9]
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"])
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],0.18)
#R code here
nrow(marathon)
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],rep(0.18,132)
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],rep(0.18,132)
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],rep(0.18,132))
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],rep(1.18,132))
#R code here
t.test(marathon$Time[marathon$Gender=="F"]/marathon$Time[marathon$Gender=="M"],rep(1.18,132))
#R code here
rm(list=ls())
weather <- read.csv("weather.csv")
table(weather$RainTomorrow)
#R code here
training <- weather[1:300,]
test <- weather[301:366,]
t.test(training$RainTomorrow, test$RainTomorrow)
#R code here
str(training)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training)
summary(model1)
logLik(model1)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training)
summary(model1)
logLik(0.15984)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training)
summary(model1)
ll <- logLik(model1)
#R code here
model2 <- glm(RainTomorrow~., data = subset(training, select = -c(Date)))
summary(model2)
ll_ratio <- 1-ll/logLik(test)
ll_ratio <- 1-ll/logLik(test$RainTomorrow)
model1$coefficients
?logLik
logLik(model2)
summary(model2)
#R code here
model2 <- glm(RainTomorrow~., data = subset(training, select = -c(Date)), family=binomial)
summary(model2)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training, family=binomial)
summary(model1)
ll <- logLik(model1)
ll
#R code here
model2 <- glm(RainTomorrow~., data = subset(training, select = -c(Date)), family=binomial)
summary(model2)
logLik(model2)
summary(model2)
#R code here
model3 <- glm(RainTomorrow~Humidity3pm+ Pressure3pm+ Pressure9am+ Temp3pm+ WindGustSpeed+ WindGustDir+ WindGust9am+ Sunshine+ Rainfall, data = weather, family = binomial)
#R code here
model3 <- glm(RainTomorrow~., data = subset(training, select = -c(Date, RainToday, Temp9am, Cloud3pm, Cloud9am, Humidity9am, Evaporation, MaxTemp, MinTemp)), family=binomial)
summary(model3)
logLik(model3)
summary(model3)
#R code here
summary(model1)
?acc
?accuracy
?fit
?model.fit
?lm.fit
?glm.fit
glm.fit(test, family = binomial)
glm.fit(test,model1, family = binomial)
glm.fit(model1,test, family = binomial)
predtest<-predict(model1,newdata=test)
#R code here
summary(model1)
predtest<-predict(model1,newdata=test)
predtest
?predict
#R code here
summary(model1)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training, family="binomial")
summary(model1)
#R code here
summary(model1)
predtest<-predict(model1,newdata=test)
#R code here
summary(model1)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training, family=binomial)
summary(model1)
#R code here
summary(model1)
predtest<-predict(model1,newdata=test)
predtest
#R code here
summary(model1)
test$RainToday
predtest<-predict(model1,newdata=test)
predtest
#R code here
model1 <- glm(RainTomorrow~RainToday+0, data = training, family=binomial)
summary(model1)
#R code here
model1 <- glm(RainTomorrow~RainToday, data = training, family=binomial)
summary(model1)
#R code here
summary(model2)
predtest2<-predict(model2,newdata=test)
predtest2
predtest<-predict(model1,newdata=test, type = "response")
#R code here
summary(model1)
predtest<-predict(model1,newdata=test, type = "response")
predtest
table(predtest)
table(test$RainTomorrow)
table(predtest)
table(test$RainTomorrow)
table(predtest)
predtest2<-predict(model2,newdata=test, type= "response")
predtest2
#R code here
summary(model2)
#R code here
summary(model2)
predtest2<-predict(model2,newdata=test, type= "response")
predtest2
predtest2<-predict(model2,newdata=test, type= "response", na.rm ="TRUE")
predtest2
predtest2<-predict(model2,newdata=test, type= "response")
predtest2
table(predtest2)
#R code here
rm(list=ls())
weather <- read.csv("weather.csv")
table(weather$RainTomorrow)
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Execute our custom script for loading packages
source("usePackages.R")
shiny::runApp('GitHub/carbon-crunch/carboncrunch')
?column
?switchInput
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
shiny::runApp('GitHub/carbon-crunch/carboncrunch')
runApp('GitHub/carbon-crunch/carboncrunch')
shiny::runApp()
runApp()
