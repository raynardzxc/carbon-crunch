profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2),     # Raw material
nrow = 2, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits)
rhs <- c(1300, 1000)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Use lpSolve to solve the linear programming problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Print the optimal value of the objective function (profit)
cat("Optimal profit value: $", lp_result$objval, "\n")
# Print the decision variables (production quantities for P1, P2, P3)
cat("Decision variables (P1, P2, P3):", lp_result$solution, "\n")
# Calculate the corresponding value of the environmental impact (pollution)
pollution_values <- c(10, 6, 3)  # Pollution values for each unit of P1, P2, P3
environmental_impact <- sum(pollution_values * lp_result$solution)
cat("Corresponding value of environmental impact (pollution):", environmental_impact, "kg of CO2\n")
# Load the lpSolve library
library(lpSolve)
# Define the coefficients of the objective function (profit)
profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2,      # Raw material
10, 6, 3),    # Pollution
nrow = 3, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits and ε for environmental impact constraint)
rhs <- c(1300, 1000, Inf)  # Pollution constraint set to Inf initially (no constraint)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Initialize a list to store the results for different ε values
results_list <- list()
# Define the range of ε values to try (you can add more values if needed)
epsilon_values <- c(0, 5, 10, 20, 50)
# Loop through each ε value and solve the problem
for (epsilon in epsilon_values) {
# Update the pollution constraint for the current ε value
rhs[3] <- epsilon
# Use lpSolve to solve the ε-constraint method problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Store the optimal results for the current ε value
result <- list(Profit = lp_result$objval,
Pollution = epsilon,
Decision_Variables = lp_result$solution)
# Append the result to the results list
results_list <- c(results_list, list(result))
}
# Print the results for each ε value
for (i in seq_along(results_list)) {
cat("For ε =", epsilon_values[i], "Optimal profit value: $", results_list[[i]]$Profit, "\n")
cat("Corresponding value of environmental impact (pollution):", results_list[[i]]$Pollution, "kg of CO2\n")
cat("Decision variables (P1, P2, P3):", results_list[[i]]$Decision_Variables, "\n\n")
}
# Define the range of ε values to try
epsilon_values <- c(0.1, 1, 5, 10, 20)
# Load the lpSolve library
library(lpSolve)
# Define the coefficients of the objective function (profit)
profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2,      # Raw material
10, 6, 3),    # Pollution
nrow = 3, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits and ε for environmental impact constraint)
rhs <- c(1300, 1000, Inf)  # Pollution constraint initially set to Inf (no constraint)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Initialize a list to store the results for different ε values
results_list <- list()
# Define the range of ε values to try (including Task 4 values)
epsilon_values <- c(0, 0.1, 1, 5, 10, 20)
# Loop through each ε value and solve the problem
for (epsilon in epsilon_values) {
# Update the pollution constraint for the current ε value
rhs[3] <- epsilon
# Use lpSolve to solve the ε-constraint method problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Store the optimal results for the current ε value
result <- list(Profit = lp_result$objval,
Pollution = epsilon,
Decision_Variables = lp_result$solution)
# Append the result to the results list
results_list <- c(results_list, list(result))
}
# Create a data frame from the results
result_df <- as.data.frame(do.call(rbind, results_list))
# Plot the 2D scatter plot to represent the objective space
plot(result_df$Profit, result_df$Pollution, type = "b", pch = 19, xlab = "Profit", ylab = "Pollution")
# Print the data frame
print(result_df)
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# Define the contribution to profit and labor required for each product
contribution_profit <- c(4, 2)
labor_required <- c(4, 2)
# Define the demand for each product
demand_wonder <- 7
demand_marvel <- 10
# Define the penalty amounts for falling short of the profit goal and using overtime labor
penalty_profit_goal <- 1
penalty_overtime_labor <- 2
# Define the lexicographic goals in order of importance
goals <- list(
goal(name = "G1", type = "minimize", coefficients = c(0, 0, 0, 1)),
goal(name = "G2", type = "minimize", coefficients = c(0, 2, 0, 0)),
goal(name = "G3", type = "minimize", coefficients = c(0, 0, 5, 0)),
goal(name = "G4", type = "minimize", coefficients = c(0, 0, 0, 5))
)
install.packages("goalprog")
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# Define the contribution to profit and labor required for each product
contribution_profit <- c(4, 2)
labor_required <- c(4, 2)
# Define the demand for each product
demand_wonder <- 7
demand_marvel <- 10
# Define the penalty amounts for falling short of the profit goal and using overtime labor
penalty_profit_goal <- 1
penalty_overtime_labor <- 2
# Define the lexicographic goals in order of importance
goals <- list(
goal(name = "G1", type = "minimize", coefficients = c(0, 0, 0, 1)),
goal(name = "G2", type = "minimize", coefficients = c(0, 2, 0, 0)),
goal(name = "G3", type = "minimize", coefficients = c(0, 0, 5, 0)),
goal(name = "G4", type = "minimize", coefficients = c(0, 0, 0, 5))
)
# Load the lpSolve library
library(lpSolve)
# Define the contribution to profit and labor required for each product
contribution_profit <- c(4, 2)
labor_required <- c(4, 2)
# Define the demand for each product
demand_wonder <- 7
demand_marvel <- 10
# Define the penalty amounts for falling short of the profit goal and using overtime labor
penalty_profit_goal <- 1
penalty_overtime_labor <- 2
# Define the coefficients of the objective function
objective_coefficients <- c(contribution_profit, penalty_profit_goal, penalty_overtime_labor, 5, 5)
# Define the constraint matrix
constraint_matrix <- matrix(c(labor_required, -1, 0, 0, 0,
labor_required, 0, -1, 0, 0,
0, 0, 1, -1, 0,
0, 0, 0, 1, -1), nrow = 4, byrow = TRUE)
# Define the right-hand side of the constraints
rhs <- c(48, 32, demand_wonder, demand_marvel)
# Use lpSolve to solve the problem
lp_result <- lp("min", objective_coefficients, constraint_matrix, "=", rhs)
# Print the value of the decision variables
cat("Decision variables (amount of each product produced):\n")
cat("Product Wonder:", lp_result$solution[1], "\n")
cat("Product Marvel:", lp_result$solution[2], "\n")
# Load the goalprog library
library(goalprog)
# A matrix of coefficients for the linear objective functions
coefficients <- matrix(c(4, 2, 4, 2, 1, 0, 0, 1), nrow = 4, byrow = TRUE)
# A vector of target values for the objective functions
targets <- c(48, 32, 7, 10)
# A data frame with the deviation variables for each objective together with the priority level
objective <- c(1, 2, 3, 4)  # index for a particular problem object
priority <- c(1, 2, 3, 4)   # level to which the row (i.e. objective) is assigned
p <- c(0, 2, 0, 0)          # weight associated with the positive deviation variable
n <- c(1, 1, 5, 5)          # weight associated with the negative deviation variable
# Use llgp to solve the problem
result <- llgp(coefficients, targets, objective, priority, p, n)
# Remove all variables from the R environment to create a fresh start
rm(list=ls())
# Execute our custom script for loading packages
source("usePackages.R")
# Name of the packages
pkgnames <- c("lpSolve","ggplot2","GGally")
# Use our custom load function
loadPkgs(pkgnames)
# Load the lpSolve library
library(lpSolve)
# Define the coefficients of the objective function (profit)
profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2),     # Raw material
nrow = 2, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits)
rhs <- c(1300, 1000)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Use lpSolve to solve the linear programming problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Print the optimal value of the objective function (profit)
cat("Optimal profit value: $", lp_result$objval, "\n")
# Print the decision variables (production quantities for P1, P2, P3)
cat("Decision variables (P1, P2, P3):", lp_result$solution, "\n")
# Calculate the corresponding value of the environmental impact (pollution)
pollution_values <- c(10, 6, 3)  # Pollution values for each unit of P1, P2, P3
environmental_impact <- sum(pollution_values * lp_result$solution)
cat("Corresponding value of environmental impact (pollution):", environmental_impact, "kg of CO2\n")
# Load the lpSolve library
library(lpSolve)
# Define the coefficients of the objective function (profit)
profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2,      # Raw material
10, 6, 3),    # Pollution
nrow = 3, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits and ε for environmental impact constraint)
rhs <- c(1300, 1000, Inf)  # Pollution constraint set to Inf initially (no constraint)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Initialize a list to store the results for different ε values
results_list <- list()
# Define the range of ε values to try (you can add more values if needed)
epsilon_values <- c(0, 5, 10, 20, 50)
# Loop through each ε value and solve the problem
for (epsilon in epsilon_values) {
# Update the pollution constraint for the current ε value
rhs[3] <- epsilon
# Use lpSolve to solve the ε-constraint method problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Store the optimal results for the current ε value
result <- list(Profit = lp_result$objval,
Pollution = epsilon,
Decision_Variables = lp_result$solution)
# Append the result to the results list
results_list <- c(results_list, list(result))
}
# Print the results for each ε value
for (i in seq_along(results_list)) {
cat("For ε =", epsilon_values[i], "Optimal profit value: $", results_list[[i]]$Profit, "\n")
cat("Corresponding value of environmental impact (pollution):", results_list[[i]]$Pollution, "kg of CO2\n")
cat("Decision variables (P1, P2, P3):", results_list[[i]]$Decision_Variables, "\n\n")
}
# Load the lpSolve library
library(lpSolve)
# Define the coefficients of the objective function (profit)
profit <- c(10, 9, 8)
# Define the constraint matrix (left-hand side coefficients of constraints)
constraint_matrix <- matrix(c(4, 3, 2,      # Working hours
3, 2, 2,      # Raw material
10, 6, 3),    # Pollution
nrow = 3, byrow = TRUE)
# Define the right-hand side of the constraints (availability limits and ε for environmental impact constraint)
rhs <- c(1300, 1000, Inf)  # Pollution constraint initially set to Inf (no constraint)
# Set the inequality signs of the constraints (1: <=, -1: >=)
direction <- c("<=", "<=", "<=")
# Set the objective sense to maximize (1: max, -1: min)
obj_direction <- 1
# Initialize a list to store the results for different ε values
results_list <- list()
# Define the range of ε values to try (including Task 4 values)
epsilon_values <- c(0, 0.1, 1, 5, 10, 20)
# Loop through each ε value and solve the problem
for (epsilon in epsilon_values) {
# Update the pollution constraint for the current ε value
rhs[3] <- epsilon
# Use lpSolve to solve the ε-constraint method problem
lp_result <- lp("max", profit, constraint_matrix, direction, rhs, all.bin = TRUE)
# Store the optimal results for the current ε value
result <- list(Profit = lp_result$objval,
Pollution = epsilon,
Decision_Variables = lp_result$solution)
# Append the result to the results list
results_list <- c(results_list, list(result))
}
# Create a data frame from the results
result_df <- as.data.frame(do.call(rbind, results_list))
# Plot the 2D scatter plot to represent the objective space
plot(result_df$Profit, result_df$Pollution, type = "b", pch = 19, xlab = "Profit", ylab = "Pollution")
# Print the data frame
print(result_df)
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# Define the contribution to profit and labor required for each product
contribution_profit <- c(4, 2)
labor_required <- c(4, 2)
# Define the demand for each product
demand_wonder <- 7
demand_marvel <- 10
# Define the penalty amounts for falling short of the profit goal and using overtime labor
penalty_profit_goal <- 1
penalty_overtime_labor <- 2
# Define the lexicographic goals in order of importance
goals <- list(
goal(name = "G1", type = "minimize", coefficients = c(0, 0, 0, 1)),
goal(name = "G2", type = "minimize", coefficients = c(0, 2, 0, 0)),
goal(name = "G3", type = "minimize", coefficients = c(0, 0, 5, 0)),
goal(name = "G4", type = "minimize", coefficients = c(0, 0, 0, 5))
)
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# A matrix of coefficients for the linear objective functions
coefficients <- matrix(c(4, 2, 4, 2, 1, 0, 0, 1), nrow = 4, byrow = TRUE)
# A vector of target values for the objective functions
targets <- c(48, 32, 7, 10)
# A data frame with the deviation variables for each objective together with the priority level
objective <- c(1, 2, 3, 4)  # index for a particular problem object
priority <- c(1, 2, 3, 4)   # level to which the row (i.e. objective) is assigned
p <- c(0, 2, 0, 0)          # weight associated with the positive deviation variable
n <- c(1, 1, 5, 5)          # weight associated with the negative deviation variable
# Use llgp to solve the problem
result <- llgp(coefficients, targets, objective, priority, p, n)
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# A matrix of coefficients for the linear objective functions
coefficients <- matrix(c(4, 2, 4, 2, 1, 0, 0, 1), nrow = 4, byrow = TRUE)
# A vector of target values for the objective functions
targets <- c(48, 32, 7, 10)
# A data frame with the deviation variables for each objective together with the priority level
objective <- c(1, 2, 3, 4)  # index for a particular problem object
priority <- c(1, 2, 3, 4)   # level to which the row (i.e. objective) is assigned
p <- c(0, 2, 0, 0)          # weight associated with the positive deviation variable
n <- c(1, 1, 5, 5)          # weight associated with the negative deviation variable
# Use llgp to solve the problem
result <- llgp(coefficients, targets, objective, priority, p, n)
install.packages("goalprog")
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# A matrix of coefficients for the linear objective functions
coefficients <- matrix(c(4, 2, 4, 2, 1, 0, 0, 1), nrow = 4, byrow = TRUE)
# A vector of target values for the objective functions
targets <- c(48, 32, 7, 10)
# A data frame with the deviation variables for each objective together with the priority level
objective <- c(1, 2, 3, 4)  # index for a particular problem object
priority <- c(1, 2, 3, 4)   # level to which the row (i.e. objective) is assigned
p <- c(0, 2, 0, 0)          # weight associated with the positive deviation variable
n <- c(1, 1, 5, 5)          # weight associated with the negative deviation variable
# Use llgp to solve the problem
result <- llgp(coefficients, targets, objective, priority, p, n)
install.packages("goalprog")
# Load the goalprog library
library(goalprog)
# A matrix of coefficients for the linear objective functions
coefficients <- matrix(c(4, 2, 4, 2, 1, 0, 0, 1), nrow = 4, byrow = TRUE)
# A vector of target values for the objective functions
targets <- c(48, 32, 7, 10)
# A data frame with the deviation variables for each objective together with the priority level
objective <- c(1, 2, 3, 4)  # index for a particular problem object
priority <- c(1, 2, 3, 4)   # level to which the row (i.e. objective) is assigned
p <- c(0, 2, 0, 0)          # weight associated with the positive deviation variable
n <- c(1, 1, 5, 5)          # weight associated with the negative deviation variable
# Use llgp to solve the problem
result <- llgp(coefficients, targets, objective, priority, p, n)
install.packages("goalprog")
library(shiny); runApp('C:/Users/ZAINA AAFREEN/Downloads/TestRShiny05.R')
library(shiny); runApp('C:/Users/ZAINA AAFREEN/Desktop/SUTD/TERM 5;-)/40.014 Engineering Systems Architecture/TestRShiny13.R')
shiny::runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp()
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
shiny::runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
shiny::runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
shiny::runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
shiny::runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
tutorial_page <- function(id) {
ns <- NS(id)
div(
div(
h1("Tutorial", style = "text-align: center; margin-top: 50px;"),
h3("Objective", style = "text-align: left; margin-top: 10px;"),
p("To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
h3("How to Play", style = "text-align: left; margin-top: 10px;"),
div(
style = "display: flex; align-items: center;",
img(src = "battery_4.png", height = "50px", width = "300px", style = "margin-right: 20px;"),
p("Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity")
),
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
}
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
tutorial_page <- function(id) {
ns <- NS(id)
div(
div(
h1("Tutorial", style = "text-align: center; margin-top: 50px;"),
h3("Objective", style = "text-align: left; margin-top: 10px;"),
p("To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
h3("How to Play", style = "text-align: left; margin-top: 10px;"),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "battery_4.png", height = "50px", width = "300px", style = "margin-right: 20px;"),
p("Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity")
),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "production_line.png", height = "300px", width = "300px", style = "margin-right: 20px;"),
p("Instructions for the second image.")
),
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
}
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
tutorial_page <- function(id) {
ns <- NS(id)
div(
div(
h1("Tutorial", style = "text-align: center; margin-top: 50px;"),
h3("Objective", style = "text-align: left; margin-top: 10px;"),
p("To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
h3("How to Play", style = "text-align: left; margin-top: 10px;"),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "battery_4.png", height = "50px", width = "300px", style = "margin-right: 20px;"),
p("Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity")
),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "production_line.png", height = "300px", width = "300px", style = "margin-right: 20px;"),
p("5 production lines of two different types producing items of different value. Lines may be upgraded to increase efficiency")
),
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
}
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
tutorial_page <- function(id) {
ns <- NS(id)
div(
div(
h1("Tutorial", style = "text-align: center; margin-top: 50px;"),
h3("Objective", style = "text-align: left; margin-top: 10px;"),
p("To balance between investing in sustainable technology (solar power) and maximizing profit at the end of 30 days while adhering to carbon emission levels."),
h3("How to Play", style = "text-align: left; margin-top: 10px;"),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "battery_4.png", height = "50px", width = "300px", style = "margin-right: 20px;"),
p("Battery that indicates the amount of solar power stored and may be upgraded to increase storage capacity")
),
div(
style = "display: flex; align-items: center;margin-bottom: 20px;",
img(src = "production_line_tut.png", height = "300px", width = "300px", style = "margin-right: 20px;"),
p("5 production lines of two different types producing items of different value. Lines may be upgraded to increase efficiency")
),
div(
style = "display: flex; align-items: center; margin-bottom: 20px;",
img(src = "toggle_fuel_tut.png", height = "50px", width = "50px", style = "margin-right: 20px;"),
img(src = "toggle_sun_tut.png", height = "50px", width = "50px", style = "margin-right: 20px;"),
p("Toggle switch at each production line to switch between using solar power or fossil fuels.If insufficient solar power is used to power a production line, the line will shut down.")
),
PrimaryButton.shinyInput(
ns("back"),
class = ".btn",
text = "Back to Home"
)
)
)
}
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
runApp('C:/Users/ZAINA AAFREEN/Desktop/carbon-crunch/carboncrunch')
